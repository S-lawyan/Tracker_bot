
from aiogram import types
from aiogram.dispatcher.filters import Text
from bot.keyboards.client_kb import *
from bot.services import dp
from bot.services import wb
from bot.services import storage
from bot.filters.is_admin import IsAdmin
from bot.utils.models import Product
from bot.utils import utilities as utl
from bot.utils.exceptions import (
    WildberriesAPIGetProductTimeout,
    WildberriesAPIClientConnectionError,
    WildberriesAPIUncorrectedQuery,
    WildberriesAPIProductNotFound,
    DatabaseExecuteQueryError
)


# ================= –ë–õ–û–ö –û–°–ù–û–í–ù–´–• –ö–û–ú–ê–ù–î –ë–û–¢–ê ==============================
@dp.message_handler(IsAdmin(), commands=["start"], state=None)
@dp.message_handler(IsAdmin(), Text(startswith="–º–µ–Ω—é", ignore_case=True), state='*')
@dp.message_handler(IsAdmin(), Text(startswith="–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ignore_case=True), state='*')
async def command_start(message: types.Message) -> None:
    if await storage.check_user(user_id=int(message.from_user.id)):
        await message.answer(text="–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel_main)
    else:
        await storage.insert_user(user_id=int(message.from_user.id))
        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
                 f"–°–µ–π—á–∞—Å –¥–ª—è —Ç–µ–±—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                 f"<b>–ü–æ—Ä–æ–≥ —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω</b> - 10%\n"
                 f"\n"
                 f"–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –æ–ø–∏—Å–∞–Ω–æ –≤ /help",
            reply_markup=admin_panel_main
        )


@dp.message_handler(IsAdmin(), commands=["help"], state='*')
@dp.message_handler(IsAdmin(), Text(startswith="–ø–æ–º–æ—â—å", ignore_case=True), state='*')
async def command_help_message(message: types.Message) -> None:
    await message.answer(text="help")


@dp.message_handler(IsAdmin(), content_types=['text'], state='*')
async def get_query(message: types.Message):
    query: str = message.text
    try:
        product: Product = await wb.get_product(query=query)
        await storage.insert_product(product=product, user_id=int(message.from_user.id))
        await message.answer(text=utl.wb_create_product_message(product=product), reply_markup=None)
    except (
            WildberriesAPIGetProductTimeout,
            WildberriesAPIClientConnectionError,
    ):
        await message.answer(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
    except WildberriesAPIProductNotFound:
        await message.answer(text="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç")
    except WildberriesAPIUncorrectedQuery:
        await message.answer(text="‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É")
    except DatabaseExecuteQueryError:
        await message.answer(text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
