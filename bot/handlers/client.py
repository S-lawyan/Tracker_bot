import math

from aiogram import types
from aiogram.dispatcher.filters import Text
from bot.config import config
from bot.keyboards.client_kb import *
from bot.services import dp
from bot.services import wb_api
from bot.services import storage
from bot.filters.is_admin import IsAdmin
from bot.utils.models import Product
from bot.utils import utilities as utl
from bot.utils.exceptions import (
    WildberriesAPIGetProductTimeout,
    WildberriesAPIClientConnectionError,
    WildberriesAPIUncorrectedQuery,
    WildberriesAPIProductNotFound,
    DatabaseExecuteQueryError
)
from aiogram.dispatcher.filters.state import State
from aiogram.dispatcher.filters.state import StatesGroup
from aiogram.dispatcher import FSMContext


class UserState(StatesGroup):
    confirm_state = State()
    await_article = State()


# ================= –ë–õ–û–ö –û–°–ù–û–í–ù–´–• –ö–û–ú–ê–ù–î –ë–û–¢–ê ==============================
@dp.message_handler(IsAdmin(), commands=["start"], state=None)
@dp.message_handler(IsAdmin(), Text(startswith="–º–µ–Ω—é", ignore_case=True), state=None)
@dp.message_handler(IsAdmin(), Text(startswith="–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ignore_case=True), state=None)
async def command_start(message: types.Message) -> None:
    if await storage.check_user(user_id=int(message.from_user.id)):
        await message.answer(text="–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel_main)
    else:
        await storage.insert_user(user_id=int(message.from_user.id))
        await message.answer(
            text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
                 f"–°–µ–π—á–∞—Å –¥–ª—è —Ç–µ–±—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                 f"<b>–ü–æ—Ä–æ–≥ —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω</b> - 10%\n"
                 f"\n"
                 f"–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –æ–ø–∏—Å–∞–Ω–æ –≤ /help",
            reply_markup=admin_panel_main
        )


@dp.message_handler(IsAdmin(), commands=["help"], state=None)
@dp.message_handler(IsAdmin(), Text(startswith="–ø–æ–º–æ—â—å", ignore_case=True), state=None)
async def command_help_message(message: types.Message) -> None:
    await message.answer(text="help")


@dp.message_handler(IsAdmin(), commands=["show_products_list"], state=None)
@dp.message_handler(IsAdmin(), Text(startswith="—Å–ø–∏—Å–æ–∫", ignore_case=True), state=None)
@dp.message_handler(IsAdmin(), Text(startswith="—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π", ignore_case=True), state=None)
async def get_product_list(message: types.Message):
    products_poll: list[Product] = await storage.get_products_by_user(user_id=int(message.from_user.id))
    if len(products_poll) == 0:
        await message.answer(text="–£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏")
    else:
        total_pages: int = math.ceil(len(products_poll) / config.bot.per_page)
        message_text = await send_products_list(products_list=products_poll)
        await message.answer(text=message_text, reply_markup=await pagination(total_pages=total_pages))


@dp.message_handler(IsAdmin(), commands=["drop_all"], state=None)
@dp.message_handler(IsAdmin(), Text(startswith="—É–¥–∞–ª–∏—Ç—å –≤—Å–µ", ignore_case=True), state=None)
async def delete_all_products(message: types.Message, state: FSMContext):
    sent_message = await message.answer(text="‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å <b>–≤—Å–µ</b> –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î?", reply_markup=kb_confirm_deletion)
    async with state.proxy() as data:
        data['sent_message'] = sent_message
    await UserState.confirm_state.set()


@dp.message_handler(IsAdmin(), commands=["drop_one"], state=None)
@dp.message_handler(IsAdmin(), Text(startswith="—É–¥–∞–ª–∏—Ç—å 1 –ø–æ–∑–∏—Ü–∏—é", ignore_case=True), state=None)
async def await_article(message: types.Message, state: FSMContext):
    sent_message = await message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=kb_cancel)
    async with state.proxy() as data:
        data['sent_message'] = sent_message
    await UserState.await_article.set()


@dp.message_handler(IsAdmin(), content_types=['text'], state=UserState.await_article)
async def delete_one_product(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        sent_message: types.Message = data['sent_message']
    await sent_message.edit_reply_markup(reply_markup=None)
    try:
        article: int = int(message.text)
        if not await storage.check_product(user_id=int(message.from_user.id), article=article):
            await storage.delete_one_product(user_id=int(message.from_user.id), article=article)
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <code>{article}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await message.reply(f"–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
        await state.finish()

    except (ValueError,):
        await message.answer("‚ö†Ô∏è –í –∞—Ä—Ç–∏–∫—É–ª–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")


@dp.callback_query_handler(IsAdmin(), text=["confirm"], state=UserState.confirm_state)
async def confirming_delete_all(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        sent_message: types.Message = data['sent_message']
    await sent_message.edit_reply_markup(reply_markup=None)
    try:
        await storage.drop_all_products(user_id=int(call.from_user.id))
        await call.message.answer(text="‚úÖ –í—Å–µ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
    except DatabaseExecuteQueryError:
        await call.message.answer(text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
    finally:
        await state.finish()


@dp.callback_query_handler(IsAdmin(), text=["cancel"], state=UserState.confirm_state)
@dp.callback_query_handler(IsAdmin(), text=["cancel"], state=UserState.await_article)
async def cancel(call: types.CallbackQuery, state: FSMContext):
    try:
        async with state.proxy() as data:
            sent_message: types.Message = data['sent_message']
        await sent_message.edit_reply_markup(reply_markup=None)
    except (Exception,):
        pass
    finally:
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()


@dp.message_handler(IsAdmin(), content_types=['text'], state=None)
async def get_query(message: types.Message):
    query: str = message.text
    try:
        product: Product = await wb_api.get_product(query=query)
        if not await storage.check_product(user_id=int(message.from_user.id), article=product.article):
            await storage.insert_product(product=product, user_id=int(message.from_user.id))
            await message.answer(text=utl.wb_create_product_message(product=product), reply_markup=None)
        else:
            await message.reply("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
    except (
            WildberriesAPIGetProductTimeout,
            WildberriesAPIClientConnectionError,
    ):
        await message.answer(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
    except WildberriesAPIProductNotFound:
        await message.answer(text="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç")
    except WildberriesAPIUncorrectedQuery:
        await message.answer(text="‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries")
    except DatabaseExecuteQueryError:
        await message.answer(text="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")


async def send_products_list(products_list: list[Product], page: int = 0) -> str:
    per_page = config.bot.per_page
    start_index: int = page * per_page
    end_index: int = start_index + per_page
    products_on_page: list[Product] = products_list[start_index:end_index]

    return await utl.generate_page_product(products=products_on_page)


@dp.callback_query_handler(lambda query: query.data.startswith("previous:"), state=None)
async def previous_page(call: types.CallbackQuery):
    products_poll: list[Product] = await storage.get_products_by_user(user_id=int(call.from_user.id))
    total_pages: int = math.ceil(len(products_poll) / config.bot.per_page)
    page = int(call.data.split(":")[1]) - 1 if int(call.data.split(":")[1]) > 0 else 0
    message_text = await send_products_list(products_list=products_poll, page=page)
    try:
        await call.message.edit_text(
            text=message_text,
            reply_markup=await pagination(
                total_pages=total_pages,
                page=page
            )
        )
    except (IndexError, KeyError):
        pass


@dp.callback_query_handler(lambda query: query.data.startswith("next:"), state=None)
async def next_page(call: types.CallbackQuery):
    products_poll: list[Product] = await storage.get_products_by_user(user_id=int(call.from_user.id))
    total_pages: int = math.ceil(len(products_poll) / config.bot.per_page)
    page = int(call.data.split(":")[1]) + 1 if int(call.data.split(":")[1]) < (total_pages-1) else (total_pages-1)
    message_text = await send_products_list(products_list=products_poll, page=page)
    try:
        await call.message.edit_text(
            text=message_text,
            reply_markup=await pagination(
                total_pages=total_pages,
                page=page
            )
        )
    except (IndexError, KeyError):
        pass
